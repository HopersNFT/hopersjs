/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "cosmwasm";
import { Uint128, Binary, Expiration } from "./CW20Base.types";
export interface CW20BaseMessage {
    contractAddress: string;
    sender: string;
    transfer: ({ amount, recipient }: {
        amount: Uint128;
        recipient: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    burn: ({ amount }: {
        amount: Uint128;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    send: ({ amount, contract, msg }: {
        amount: Uint128;
        contract: string;
        msg: Binary;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    increaseAllowance: ({ amount, expires, spender }: {
        amount: Uint128;
        expires?: Expiration;
        spender: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    decreaseAllowance: ({ amount, expires, spender }: {
        amount: Uint128;
        expires?: Expiration;
        spender: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    transferFrom: ({ amount, owner, recipient }: {
        amount: Uint128;
        owner: string;
        recipient: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    sendFrom: ({ amount, contract, msg, owner }: {
        amount: Uint128;
        contract: string;
        msg: Binary;
        owner: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    burnFrom: ({ amount, owner }: {
        amount: Uint128;
        owner: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    mint: ({ amount, recipient }: {
        amount: Uint128;
        recipient: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    updateMinter: ({ newMinter }: {
        newMinter?: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    updateMarketing: ({ description, marketing, project }: {
        description?: string;
        marketing?: string;
        project?: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    uploadLogo: (funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export declare class CW20BaseMessageComposer implements CW20BaseMessage {
    sender: string;
    contractAddress: string;
    constructor(sender: string, contractAddress: string);
    transfer: ({ amount, recipient }: {
        amount: Uint128;
        recipient: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    burn: ({ amount }: {
        amount: Uint128;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    send: ({ amount, contract, msg }: {
        amount: Uint128;
        contract: string;
        msg: Binary;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    increaseAllowance: ({ amount, expires, spender }: {
        amount: Uint128;
        expires?: Expiration;
        spender: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    decreaseAllowance: ({ amount, expires, spender }: {
        amount: Uint128;
        expires?: Expiration;
        spender: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    transferFrom: ({ amount, owner, recipient }: {
        amount: Uint128;
        owner: string;
        recipient: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    sendFrom: ({ amount, contract, msg, owner }: {
        amount: Uint128;
        contract: string;
        msg: Binary;
        owner: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    burnFrom: ({ amount, owner }: {
        amount: Uint128;
        owner: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    mint: ({ amount, recipient }: {
        amount: Uint128;
        recipient: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    updateMinter: ({ newMinter }: {
        newMinter?: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    updateMarketing: ({ description, marketing, project }: {
        description?: string;
        marketing?: string;
        project?: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    uploadLogo: (funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
