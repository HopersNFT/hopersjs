/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Uint128, Binary, MinterResponse, Expiration, AllAccountsResponse, AllAllowancesResponse, AllSpenderAllowancesResponse, AllowanceResponse, BalanceResponse, DownloadLogoResponse, MarketingInfoResponse, TokenInfoResponse } from "./CW20Base.types";
export interface CW20BaseReadOnlyInterface {
    contractAddress: string;
    balance: ({ address }: {
        address: string;
    }) => Promise<BalanceResponse>;
    tokenInfo: () => Promise<TokenInfoResponse>;
    minter: () => Promise<MinterResponse>;
    allowance: ({ owner, spender }: {
        owner: string;
        spender: string;
    }) => Promise<AllowanceResponse>;
    allAllowances: ({ limit, owner, startAfter }: {
        limit?: number;
        owner: string;
        startAfter?: string;
    }) => Promise<AllAllowancesResponse>;
    allSpenderAllowances: ({ limit, spender, startAfter }: {
        limit?: number;
        spender: string;
        startAfter?: string;
    }) => Promise<AllSpenderAllowancesResponse>;
    allAccounts: ({ limit, startAfter }: {
        limit?: number;
        startAfter?: string;
    }) => Promise<AllAccountsResponse>;
    marketingInfo: () => Promise<MarketingInfoResponse>;
    downloadLogo: () => Promise<DownloadLogoResponse>;
}
export declare class CW20BaseQueryClient implements CW20BaseReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    balance: ({ address }: {
        address: string;
    }) => Promise<BalanceResponse>;
    tokenInfo: () => Promise<TokenInfoResponse>;
    minter: () => Promise<MinterResponse>;
    allowance: ({ owner, spender }: {
        owner: string;
        spender: string;
    }) => Promise<AllowanceResponse>;
    allAllowances: ({ limit, owner, startAfter }: {
        limit?: number;
        owner: string;
        startAfter?: string;
    }) => Promise<AllAllowancesResponse>;
    allSpenderAllowances: ({ limit, spender, startAfter }: {
        limit?: number;
        spender: string;
        startAfter?: string;
    }) => Promise<AllSpenderAllowancesResponse>;
    allAccounts: ({ limit, startAfter }: {
        limit?: number;
        startAfter?: string;
    }) => Promise<AllAccountsResponse>;
    marketingInfo: () => Promise<MarketingInfoResponse>;
    downloadLogo: () => Promise<DownloadLogoResponse>;
}
export interface CW20BaseInterface extends CW20BaseReadOnlyInterface {
    contractAddress: string;
    sender: string;
    transfer: ({ amount, recipient }: {
        amount: Uint128;
        recipient: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    burn: ({ amount }: {
        amount: Uint128;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    send: ({ amount, contract, msg }: {
        amount: Uint128;
        contract: string;
        msg: Binary;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    increaseAllowance: ({ amount, expires, spender }: {
        amount: Uint128;
        expires?: Expiration;
        spender: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    decreaseAllowance: ({ amount, expires, spender }: {
        amount: Uint128;
        expires?: Expiration;
        spender: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    transferFrom: ({ amount, owner, recipient }: {
        amount: Uint128;
        owner: string;
        recipient: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    sendFrom: ({ amount, contract, msg, owner }: {
        amount: Uint128;
        contract: string;
        msg: Binary;
        owner: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    burnFrom: ({ amount, owner }: {
        amount: Uint128;
        owner: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    mint: ({ amount, recipient }: {
        amount: Uint128;
        recipient: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateMinter: ({ newMinter }: {
        newMinter?: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateMarketing: ({ description, marketing, project }: {
        description?: string;
        marketing?: string;
        project?: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    uploadLogo: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export declare class CW20BaseClient extends CW20BaseQueryClient implements CW20BaseInterface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    transfer: ({ amount, recipient }: {
        amount: Uint128;
        recipient: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    burn: ({ amount }: {
        amount: Uint128;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    send: ({ amount, contract, msg }: {
        amount: Uint128;
        contract: string;
        msg: Binary;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    increaseAllowance: ({ amount, expires, spender }: {
        amount: Uint128;
        expires?: Expiration;
        spender: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    decreaseAllowance: ({ amount, expires, spender }: {
        amount: Uint128;
        expires?: Expiration;
        spender: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    transferFrom: ({ amount, owner, recipient }: {
        amount: Uint128;
        owner: string;
        recipient: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    sendFrom: ({ amount, contract, msg, owner }: {
        amount: Uint128;
        contract: string;
        msg: Binary;
        owner: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    burnFrom: ({ amount, owner }: {
        amount: Uint128;
        owner: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    mint: ({ amount, recipient }: {
        amount: Uint128;
        recipient: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateMinter: ({ newMinter }: {
        newMinter?: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateMarketing: ({ description, marketing, project }: {
        description?: string;
        marketing?: string;
        project?: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    uploadLogo: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
