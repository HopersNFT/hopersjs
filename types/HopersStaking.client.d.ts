/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Uint128, Denom, Binary, StakersListResponse, ConfigResponse, StakerInfoResponse, StateResponse, UnbondingInfoResponse } from "./HopersStaking.types";
export interface HopersStakingReadOnlyInterface {
    contractAddress: string;
    config: () => Promise<ConfigResponse>;
    state: ({ blockTime }: {
        blockTime?: number;
    }) => Promise<StateResponse>;
    stakerInfo: ({ staker }: {
        staker: string;
    }) => Promise<StakerInfoResponse>;
    allStakers: ({ limit, startAfter }: {
        limit?: number;
        startAfter?: string;
    }) => Promise<StakersListResponse>;
    unbondingInfo: ({ limit, staker, startAfter }: {
        limit?: number;
        staker: string;
        startAfter?: number;
    }) => Promise<UnbondingInfoResponse>;
}
export declare class HopersStakingQueryClient implements HopersStakingReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    config: () => Promise<ConfigResponse>;
    state: ({ blockTime }: {
        blockTime?: number;
    }) => Promise<StateResponse>;
    stakerInfo: ({ staker }: {
        staker: string;
    }) => Promise<StakerInfoResponse>;
    allStakers: ({ limit, startAfter }: {
        limit?: number;
        startAfter?: string;
    }) => Promise<StakersListResponse>;
    unbondingInfo: ({ limit, staker, startAfter }: {
        limit?: number;
        staker: string;
        startAfter?: number;
    }) => Promise<UnbondingInfoResponse>;
}
export interface HopersStakingInterface extends HopersStakingReadOnlyInterface {
    contractAddress: string;
    sender: string;
    receive: ({ amount, msg, sender }: {
        amount: Uint128;
        msg: Binary;
        sender: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    unbond: ({ amount }: {
        amount: Uint128;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    withdraw: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    redeem: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    migrateStaking: ({ newStakingContract }: {
        newStakingContract: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateConfig: ({ distributionSchedule }: {
        distributionSchedule: number[][];
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateAdmin: ({ admin }: {
        admin: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateTokenContract: ({ lpTokenContract, rewardToken }: {
        lpTokenContract: string;
        rewardToken: Denom;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateLockDuration: ({ lockDuration }: {
        lockDuration: number;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export declare class HopersStakingClient extends HopersStakingQueryClient implements HopersStakingInterface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    receive: ({ amount, msg, sender }: {
        amount: Uint128;
        msg: Binary;
        sender: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    unbond: ({ amount }: {
        amount: Uint128;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    withdraw: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    redeem: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    migrateStaking: ({ newStakingContract }: {
        newStakingContract: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateConfig: ({ distributionSchedule }: {
        distributionSchedule: number[][];
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateAdmin: ({ admin }: {
        admin: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateTokenContract: ({ lpTokenContract, rewardToken }: {
        lpTokenContract: string;
        rewardToken: Denom;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateLockDuration: ({ lockDuration }: {
        lockDuration: number;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
